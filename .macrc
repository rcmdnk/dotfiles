#!/usr/bin/env bash

if ! type -a source_file >&/dev/null;then
  source_file() {
    if [ $# -lt 1 ];then
      echo "ERROR!!! source_file is called w/o an argument"
      return
    fi
    arg="$1"
    shift
    if [ -r "$arg" ]; then
      source "$arg"
    fi
  } # }}} Function for sourcing with precheck of the file
fi

## Use Vim in MacVim, if better
#*********
#**done at .bashrc like:
#**      if [[ "$OSTYPE" =~ "darwin" ]] && [ -d /Applications/MacVim.app/Contents/MacOS ];then
#**        export PATH=$HOME/usr/local/bin:$HOME/usr/bin:/Applications/MacVim.app/Contents/MacOS:/usr/local/bin:$PATH
#**      else
#vimversion=`vim --version`
#vimvn=`echo "$vimversion"|grep "Vi IMproved"|cut -d' ' -f 5` 2>/dev/null
#vimpatches=`echo "$vimversion"|grep "patches"|cut -d' ' -f 3|cut -d'-' -f2` 2>/dev/null
#vimluacheck=`echo "$vimversion"|grep lua|grep -v Linking|awk '{split($0,tmp,"lua")}{print substr(tmp[1],length(tmp[1]),1)}'`
#mvimversion=`mvim --version`
#mvimvn=`echo "$mvimversion"|grep "Vi IMproved"|cut -d' ' -f 5` 2>/dev/null
#mvimpatches=`echo "$mvimversion"|grep "patches"|cut -d' ' -f 3|cut -d'-' -f2` 2>/dev/null
#mvimluacheck=`echo "$mvimversion"|grep lua|grep -v Linking|awk '{split($0,tmp,"lua")}{print substr(tmp[1],length(tmp[1]),1)}'`
#
#mvimflag=0
#if [ "$mvimluacheck" = "+" -a "$vimluacheck" = "+" ];then
#  mvimflag=2
#elif [ "$mvimluacheck" = "-" -a "$vimluacheck" = "-" ];then
#  mvimflag=2
#elif [ "$mvimluacheck" = "+" -a "$vimluacheck" = "-" ];then
#  mvimflag=1
#else
#  mvimflag=0
#fi
#
#if [ $mvimflag -eq 2 ];then
#  vimret=`echo -n '$xx = '$mvimvn' <=> '$vimvn';print "$xx \n"'|perl`
#  if [ $vimret -eq 1 ];then
#    mvimflag=1
#  elif [ -z "$mvimpatches" ];then
#    mvimflag=0
#  elif [ -z "$vimpatches" ];then
#    mvimflag=1
#  else
#    vimret=`echo -n '$xx = '$mvimpatches' <=> '$vimpatches';print "$xx \n"'|perl`
#    if [ $vimret -eq 1 ];then
#      mvimflag=1
#    else
#      mvimflag=0
#    fi
#  fi
#fi
#
#if [ $mvimflag -eq 1 ];then
#  alias vim="mvim"
#  alias vimdiff="mvimdiff"
#fi

# ssh agent
if [ -z "$SSH_AUTH_SOCK" ];then
  #export SSH_AUTH_SOCK=`/usr/sbin/lsof|grep ssh-agent|grep Listeners|awk '{print $8}'`
  sock_tmp=($(ls -t /tmp/com.apple.launchd.*/Listeners 2>/dev/null))
  if [ ${#sock_tmp[@]} -eq 0 ];then
    # For Mavericks or older OS X
    sock_tmp=($(ls -t /tmp/launchd-*/Listeners 2>/dev/null))
  fi
  for s in "${sock_tmp[@]}";do
    export SSH_AUTH_SOCK=$s
    ssh-add -l >& /dev/null
    ret=$?
    if [ $ret -eq 0 ] || [ $ret -eq 1 ];then
      break
    fi
    unset SSH_AUTH_SOCK
  done
  unset sock_tmp
fi

# Homebrew
brew_prefix=$(command brew --prefix)
ret=$?
if [ $ret -eq 0 ];then
  ## brew api token
  source_file ~/.brew_api_token

  ## completion from brew (disabled to faster reading)
  if [ "$BASH_VERSION" != "" ];then
    source_file "$brew_prefix/etc/bash_completion"
  elif [ "$ZSH_VERSION" != "" ];then
    for d in "share/zsh-completions" "share/zsh/zsh-site-functions";do
      brew_completion="$brew_prefix/$d"
      if [ -d "$brew_completion" ] && ! echo " ${fpath[*]} " |grep -q " $brew_completion ";then
        fpath=("$brew_completion" "${fpath[@]}")
      fi
    done
    autoload -Uz compinit
    compinit
  fi

  ## wrap brew (brew-wrap in brew-file)
  source_file "$brew_prefix/etc/brew-wrap"

  ## No emoji
  export HOMEBREW_NO_EMOJI=1

  ## Disable Analytics
  export HOMEBREW_NO_ANALYTICS=1

  ## Python2
  # Use python for python2
  #python2path="$brew_prefix/opt/python@2/libexec/bin"
  #if [ -d "$python2path" ];then
  #  export PATH="$PATH:$python2path"
  #fi

  ## Openssl
  OPENSSL_PATH="$brew_prefix/opt/openssl"
  if [ -d "$OPENSSL_PATH" ];then
    export PATH=$OPENSSL_PATH/bin:$PATH
    export LD_LIBRARY_PATH=$OPENSSL_PATH/lib:$LD_LIBRARY_PATH
    export CPATH=$OPENSSL_PATH/include:$LD_LIBRARY_PATH
  fi

  ## Alias
  alias cask='brew cask'

fi

# JAVA_HOME
export JAVA_HOME=$(/usr/libexec/java_home)
if [ -f /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc ];then
  export PATH=$PATH:/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources
fi

# For Gem
if [ -d /usr/local/gems ];then
  export GEM_HOME=/usr/local/gems
  export PATH=$GEM_HOME/bin:$PATH
fi
