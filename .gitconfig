[user]
  name = rcmdnk
  email = rcmdnk@gmail.com
[github]
  user = rcmdnk
[core]
  autocrlf = false
  editor = vim
  execludesfile = ~/.gitignore_global
  quotepath = false
[push]
  default = matching
[fetch]
  prune = true
[merge]
  tool = vimdiff
  keepBackup = false
[diff]
  algorithm = histogram
[pager]
  tag = false
[color]
  ui = auto
[alias]
  ac = "!f () {\
    git add -A;\
    git commit -a \"$@\";\
  };f"
  ad = add -A
  ba = branch -a
  br = branch
  current-branch = rev-parse --abbrev-ref HEAD
  cb = current-branch
  checkout-empty = checkout --orphan # checkout empty(orphan) branch
  ce = checkout-empty
  ci = commit -a
  cl = clone --recursive
  co = checkout
  git-dir = rev-parse --git-dir
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-tag = log --decorate=full
  ls = ls-files
  mh = rebase -i HEAD~10 # merge head
  rbm = rebase master
  sb = show-branch
  sh = show
  st = status
  su = stash -u # stash also untracked
  top = rev-parse --show-toplevel
  root = top
  p = push origin $(git rev-parse --abbrev-ref HEAD)
  dns = diff --name-status
  dm = diff master
  dw = diff --color-words
  dc = diff --cached
  ds = diff --staged
  dd = diff --diff-algorithm=default
  dw = diff --word-diff
  d1 = diff HEAD~
  d2 = diff HEAD~~
  d3 = diff HEAD~~~
  d4 = diff HEAD~~~~
  d5 = diff HEAD~~~~~
  d = "!f () {\
    if expr \"$1\" : \"[0-9]*\" >/dev/null;then \
      git diff HEAD~\"${@}\";\
    else \
      git difftool --tool=vimdiff --no-prompt $*;\
    fi;\
  };f"
  sm = submodule
  smfe = submodule foreach
  smad = "!f () {\
    if [ $# -lt 1 ];then \
      echo \"Usage: git smad <git_repo_path> [submodule parent path]\";\
      exit;\
    fi;\
    git_repo=${1};\
    repo_name=${git_repo#*/};\
    repo_name=${repo_name%.git};\
    base=$(basename \"${2}\");\
    if [ \"$base\" = \"$repo_name\" ];then \
      path=\"$(dirname \"${2}\")\";\
    else \
      path=\"${2}\";\
    fi;\
    echo git submodule add ${git_repo} \"./${path}/${repo_name}\";\
    git submodule add ${git_repo} \"./${path}/${repo_name}\";\
  };f"
  smrm  = "!f () {\
    if [ $# -ne 1 ];then \
      echo \"Usage: git <smrm path/to/submodule>\";\
      exit;\
    fi;\
    sm=${1%/};\
    echo git config --remove-section submodule.${sm};\
    git config --remove-section submodule.${sm};\
    echo git config --file .gitmodules --remove-section submodule.${sm};\
    git config --file .gitmodules --remove-section submodule.${sm};\
    echo git rm --cached ${sm};\
    git rm --cached ${sm};\
    gitdir=$(git rev-parse --git-dir);\
    echo rm -rf ${gitdir}/modules/${sm};\
    rm -rf ${gitdir}/modules/${sm};\
    echo rm -rf ${sm};\
    rm -rf ${sm};\
  };f"
  pull-dry-run  = "!git fetch origin;\
    b=$(git rev-parse --abbrev-ref HEAD);\
    git diff --stat --summary ${b}..origin/${b}"
  pull-dry-run-s = "!git fetch origin $(git config branch.$(git rev-parse --abbrev-ref HEAD).merge);\
    git diff --stat --summary HEAD...FETCH_HEAD"
  tag-renew = "!f () {\
    if [ \"$1\" = \"-v\" ];then \
      tag=\"$2\";\
      shift;shift;\
    else \
      tag=v$(git tag|sed s/v//g|sort -t . -n -k1,1 -k2,2 -k3,3|tail -n1);\
    fi;\
    if [ $# -ne 0 ];then \
      comment=\"$*\";\
    else \
      comment=\"$(git log -1|tail -n +5)\";\
    fi;\
    tagcheck=$(git tag|grep ${tag});\
    if [ \"$tagcheck\" != \"\" ];then \
      git tag -d ${tag};\
      git push origin :${tag};\
    fi;\
    git tag -a ${tag} -m \"${comment}\";\
    git push --tag;\
  };f"
  tag-new = "!f () {\
    if [ \"$1\" = \"-v\" ];then \
      tag=\"$2\";\
      shift;shift;\
    else \
      tag=v$(git tag|sed s/v//g|sort -t . -n -k1,1 -k2,2 -k3,3|tail -n1);\
      tag_minor=${tag##*.};\
      ((tag_minor++));\
      tag=${tag%.*}.${tag_minor};\
    fi;\
    if [ $# -ne 0 ];then \
      comment=\"$*\";\
    else \
      comment=\"$(git log -1|tail -n +5)\";\
    fi;\
    echo comment: $comment;\
    tagcheck=$(git tag|grep ${tag});\
    if [ \"$tagcheck\" != \"\" ];then \
      echo \"tag: ${tag} exists\"\
      echo \"Please check tag or use tag-renew.\"\
      return 1;\
    fi;\
    git tag -a ${tag} -m \"${comment}\";\
    git push --tag;\
  };f"
  tag-delete = "!f () {\
    git tag -d ${1};\
    git push origin :${1};\
  };f"
  cancel = "!f () {\
    git commit -a -m 'Temporary commit for cancel';\
    git reset --hard HEAD~;\
  };f"
  check = "!f () {\
    if [ -f ~/.gitavoid ];then \
      is_avoid=0;\
      for f in `git ls-files`;do \
        if [ ! -f $f ];then \
          continue;\
        fi;\
        while read a;do \
          if grep -i -q $a $f;then \
            echo \"avoid word $a is included in $f!!!\";\
            is_avoid=1;\
            return 1;\
          fi;\
        done < ~/.gitavoid;\
      done;\
      return $is_avoid;\
    else \
      echo 'WARNING: There is no ~/.gitavoid file!';\
      return 2;\
    fi;\
  };f"
  update = "!f () {\
    if  [ \"$1\" = \"--nocommit\" ] || [ \"$1\" = 0 ];then \
      echo '$ git status';\
      ret=$(git status);\
      echo \"$ret\";\
      if ! echo \"$ret\" | grep -q \"nothing to commit\";then \
        echo 'There are non committed changes.';\
        return 0;\
      fi;\
    fi;\
    echo $ git check;\
    git check;\
    st=$?;\
    if [ $st != 0 ];then echo Failed to git check; return $st;fi;\
    difffiles=$(git status|grep -e 'new file' -e 'modified'|cut -d':' -f2);\
    if [ \"$difffiles\" != \"\" ];then \
      echo git commit -a -m \"$difffiles, from $OSTYPE\";\
      git commit -a -m \"$difffiles, from $OSTYPE\";\
    fi;\
    echo $ git pull --rebase;\
    git pull --rebase;\
    st=$?;\
    if [ $st != 0 ];then echo Failed to git pull --rebase;return 1;fi;\
    echo $ git push;\
    git push;\
    st=$?;\
    if [ $st != 0 ];then echo Failed to git push; return 1;fi;\
    echo $ git gc;\
    git gc > /dev/null 2>&1;\
    st=$?;\
    if [ $st != 0 ];then echo Failed to git gc; return 1;fi;\
  };f"
  up = update
  u = update
  deleted = log --diff-filter=D --summary
  restore = "!f () {\
    if [ \"$#\" -eq 0 ];then \
      echo 'usage: git restore <file_name> [file_name_2 [file_name_3 [...]]]';\
      return 1;\
    fi;\
    ret=0;\
    for f in \"$@\";do \
      if [ -a \"$(git rev-parse --show-toplevel)/$f\" ];then \
        printf \"\\e[31m$f exists\\n\\e[m\";\
        ret=2;\
        continue;\
      fi;\
      c=$(git rev-list -n 1 HEAD -- \"$f\");\
      if [ -n \"$c\" ];then \
        git checkout \"$c\"^ -- \"$f\";\
        echo \"$f\" has been restored;\
      else \
        printf \"\\e[31m$f is not in the log\\n\\e[m\";\
        ret=2;\
      fi;\
    done;\
    return $ret;\
  };f"
  al = "!f() {\
    if [ \"$#\" -eq 0 ];then \
      git config --name-only --get-regexp ^alias\\.|cut -d"." -f2|column;\
      return;\
    fi;\
    ret=0;\
    for a in \"$@\";do \
      git config --get-regexp ^alias\\.\"$a\"$;\
      rettmp=$?;\
      if [ $rettmp != 0 ];then \
        ret=$rettmp;\
        printf \"\\e[31malias.$a is not defined as alias\\n\\e[m\";\
      fi;\
    done;\
    return $ret;\
  };f"
[credential]
  username = rcmdnk
