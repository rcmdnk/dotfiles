#!/usr/bin/env bash
# Common rc file for Bash/Zsh

# shellcheck disable=SC1090

_source_file () { # Function for sourcing with pre check of the file {{{
  if [[ $# -lt 1 ]];then
    echo "ERROR!!! Usage: _source_file <file>"
    return
  fi
  file="$1"
  if [[ -r "$file" ]]; then
    source "$file"
  fi
} # }}} Function for sourcing with pre check of the file

## PATH {{{
_reset_path () { # Check if this is first time to read bashrc or not {{{
  local p
  #for p in PATH LD_LIBRARY_PATH PYTHONPATH PKG_CONFIG_PATH;do
  for p in PATH PYTHONPATH PKG_CONFIG_PATH;do
    eval "local ip=\$INIT_$p"
    if [[ -z "$ip" ]];then
      # Set initial values
      eval export INIT_$p="\$$p"
    else
      # Reset paths
      eval export $p=\""$ip"\"
    fi
  done
} # }}} Check if this is first time to read bashrc or not

_add_path () { # {{{
  if [[ $# -lt 2 ]];then
    echo "Usage: _add_path <PATH, LD_LIBRARY_PATH or  etc..> <path> [1 to add in the last]"
    return 1
  fi
  local var="$1"
  local path="$2"
  local last=${3:-0}
  eval local current=":\${$var}:"
  if [ "$current" == "::" ];then
    eval "export ${var}=\"${path}\""
    return
  fi
  current=${current/:${path}:/:}
  if [[ "$last" = 1 ]];then
    current=${current}${path}
  else
    current=${path}${current}
  fi
  current=$(echo "${current}"|sed 's/^://'|sed 's/:$//')
  eval "export ${var}=\"${current}\""
} # }}}

check_path () { # {{{
  if [[ $# -eq 0 ]];then
    echo "Usage: check_path <PATH, LD_LIBRARY_PATH or  etc..>"
    return 1
  fi
  local v=$1
  local LF=$'\\\x0A'
  eval "echo \$$v"| sed 's/:/'"$LF"'/g'
} # }}}

_clean_path () { # {{{
  if [[ $# -eq 0 ]];then
    echo "Usage: _clean_path <PATH, LD_LIBRARY_PATH or etc..>"
    return 1
  fi
  local path_name=$1
  eval "local v=\$$path_name"
  local orig_ifs=$IFS
  IFS=":"
  local p_orig=($v)
  IFS=$orig_ifs
  v_tmp=""
  for p in "${p_orig[@]}";do
    _add_path v_tmp "$p" 1
  done
  eval "export ${v}=\"\$${v_tmp}\""
  unset v_tmp
} # }}}

_remove_path_lib () { # {{{
  local p=$1
  export PATH=$(echo $PATH|sed "s|^${p}/bin:*||")
  export PATH=$(echo $PATH|sed "s|\(:\)${p}/bin:*|\1|")
} # }}}

_set_path_lib () { # {{{
  local p=$1
  local last=$2
  _add_path PATH "${p}/bin"
  #_add_path LD_LIBRARY_PATH "${p}/lib" $last
  #_add_path LD_LIBRARY_PATH "${p}/lib/pkgconfig" $last
  #_add_path LD_LIBRARY_PATH "${p}/lib64" $last
  #_add_path LD_LIBRARY_PATH "${p}/lib64/pkgconfig" $last
} # }}}

_load_completion () { # {{{
  local d="$1"
  if [ -n "$ZSH_VERSION" ];then
    local path="${d}/share/zsh/site-functions"
  elif [ -n "$BASH_VERSION" ];then
    local path="${d}/etc/bash_completion.d"
  else
    return
  fi
  for f in "${path}/"*;do
    _source_file "$f"
  done
} # }}}

_set_ghq_path () { # {{{
  local root
  local d
  local f
  if type ghq >& /dev/null;then
    root=$(command ghq root)
    if [[ -z "$root" ]];then
      root="$HOME/.ghq"
    fi
    for d in $(command ghq list);do
      local path="${root}/${d}/bin"
      if [[ -d "$path" ]];then
        _add_path PATH "$path"
      fi
      for f in "${root}/${d}/etc/bash_completion.d/"*;do
        _source_file "$f"
      done
    done
  fi
} # }}}

_set_homebrew_path () { # {{{
  local prefix=""
  local path=""
  local brew_dir_cand=()
  if [[ "$OSTYPE" = darwin* ]];then
    if [ "$(uname -m)" = arm64 ];then
      brew_dir_cand=(/opt/homebrew/)
    else
      brew_dir_cand=(/usr/local/)
    fi
  else
    brew_dir_cand=(/home/linuxbrew/.linuxbrew/ "$HOME/.linuxbrew/")
  fi
  for path in "${brew_dir_cand[@]}";do
    if [ -d "$path" ];then
      prefix=$path
      break
    fi
  done
  local brew_cmd="${prefix}/bin/brew"
  if [ ! -f "${brew_cmd}" ];then
    return
  fi
  eval "$("$brew_cmd" shellenv)"

  ## completion from brew (disabled to faster reading)
  if [ "$BASH_VERSION" != "" ];then
    _source_file "$HOMEBREW_PREFIX/etc/bash_completion"  # for bash-completion
    _source_file "$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh"  # for bash-completion@2
  elif [ "$ZSH_VERSION" != "" ];then
    for d in "share/zsh-completions" "share/zsh/zsh-site-functions";do
      brew_completion="$HOMEBREW_PREFIX/$d"
      if [ -d "$brew_completion" ] && ! echo " ${fpath[*]} " |grep -q " $brew_completion ";then
        fpath=("$brew_completion" "${fpath[@]}")
      fi
    done
    autoload -Uz compinit
    compinit
  fi

  ## No emoji
  export HOMEBREW_NO_EMOJI=1

  ## Disable Analytics
  export HOMEBREW_NO_ANALYTICS=1

  ## brew-file settings
  export HOMEBREW_BREWFILE_ON_REQUEST=1

  ## wrap brew (brew-wrap in brew-file)
  _source_file "$HOMEBREW_PREFIX/etc/brew-wrap"

  ## command not found
  _source_file "$("$brew_cmd" --repository)/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"

  ## binutils
  _add_path PATH "$HOMEBREW_PREFIX/opt/binutils/bin"
  #_add_path LD_LIBRARY_PATH "$HOMEBREW_PREFIX/opt/binutils/lib"
  #_add_path CPATH "$HOMEBREW_PREFIX/opt/binutils/include"

  ## Python3 -> python
  _add_path PATH $(brew --prefix)/opt/python/libexec/bin

  ## Ruby 2.7 for octopress
  _add_path PATH "$HOMEBREW_PREFIX/opt/ruby@2.7/bin"

  ## Openssl
  OPENSSL_PATH="$HOMEBREW_PREFIX/opt/openssl"
  _add_path PATH "$OPENSSL_PATH/bin"
  #_add_path LD_LIBRARY_PATH "$OPENSSL_PATH/lib"
  #_add_path CPATH "$OPENSSL_PATH/include"

  ## Java
  _add_path PATH "$HOMEBREW_PREFIX/opt/openjdk/bin"

  ## Alias
  alias cask='brew cask'
} # }}}

_set_pyenv () { # {{{
  if ! type pyenv >& /dev/null;then
    return
  fi
  _source_file "$HOME/.pyenvrc"
  eval "$(pyenv init -)"
} # }}}

_set_path () { # {{{
  if [[ "$OSTYPE" == darwin* ]];then
    # Remove /usr/local which is only for Homebrew arm64
    _remove_path_lib "/usr/local"
  fi

  for p in "" "/usr";do
    _set_path_lib $p
  done

  _set_homebrew_path

  if [[ "$OSTYPE" != darwin* ]];then
    _set_path_lib "/usr/local"
  fi

  for p in "$HOME" "$HOME/.local" "$HOME/usr" "$HOME/usr/local";do
    _set_path_lib "$p"
  done

  _source_file "$HOME/.poetry/env"
  _set_pyenv

  export GOPATH=$HOME/.go
  if [[ -d "$GOPATH/bin" ]];then
    _add_path PATH "${GOPATH}/bin"
  fi
  if [[ -n "$SSHHOME" ]];then
    _add_path PATH "${SSHHOME}/.sshrc"
  fi

  _set_ghq_path

  if [ -d "$HOME/.lima/docker/sock" ];then
    export DOCKER_HOST=unix://$HOME/.lima/docker/sock/docker.sock
  fi
} # }}}

# }}} PATH

_set_env () { # Shell/Environmental variables {{{
  # Lang
  export LANG="en_US.UTF-8"
  #export LANG="ja_JP.eucJP"
  #export LANG="ja_JP.UTF-8"
  #export LC_ALL="ja_JP.UTF-8"
  #export LC_ALL="en_GB.UTF-8"
  export LC_ALL="en_US.UTF-8"
  #export LC_MESSAGES="en_GB.UTF-8"
  #export LC_DATE="en_GB.UTF-8"

  # XMODIFIERS
  #export XMODIFIERS="@im=kinput2"

  # History
  HISTSIZE=500000
  HISTFILESIZE=500000
  export HISTCONTROL="erasedups:ignoreboth"
  export HISTIGNORE="cd:cd :cd -:cd ../:ls:sd:cl:pwd:history:exit:bg:fg:git st:git push:git update"
  export HISTTIMEFORMAT='%y/%m/%d %H:%M:%S  ' # add time to history

  # ls color
  if [[ "$OSTYPE" = linux* ]] || [[ "$OSTYPE" = cygwin* ]];then
    # Linux
    if type dircolors >& /dev/null;then
      eval "$(dircolors ~/.colourrc)"
    fi
    _source_file "$HOME/.lscolors"
  elif [[ "$OSTYPE" = darwin* ]];then
    # Mac (LSCOLORS, instead of LS_COLORS)
    export LSCOLORS=DxgxcxdxCxegedabagacad
  fi

  # Editors
  if type nvim >& /dev/null;then
    export VISUAL=nvim
    export EDITOR=nvim
  elif type vim >& /dev/null;then
    export VISUAL=vim
    export EDITOR=vim
  elif type vi >& /dev/null;then
    export VISUAL=vi
    export EDITOR=vi
  fi
  if type less >& /dev/null;then
    export PAGER="less"
  fi

  # For less
  export LESS='-FXIRMW -x2'
  if type source-highlight >& /dev/null;then
    if type my_lesspipe >& /dev/null;then
      export LESSOPEN='| my_lesspipe %s'
    elif type src-hilite-lesspipe.sh >& /dev/null;then
      export LESSOPEN='| src-hilite-lesspipe.sh %s'
    fi
  fi

  # Terminfo
  for d in "$HOME/.terminfo/" "$HOME/usr/share/terminfo/" \
           "$HOME/usr/share/lib/terminfo/" "/usr/share/terminfo/" \
           "/usr/share/lib/terminfo";do
    if [[ -d "$d" ]];then
      export TERMINFO="$d"
      break
    fi
  done

  # TMPDIR fix, especially for Cygwin
  if [[ ! "$TMPDIR" ]];then
    if [[ "$TMP" ]];then
      export TMPDIR=$TMP
    elif [[ "$TEMP" ]];then
      export TMPDIR=$TEMP
    elif [[ -w "/tmp/$USER" ]];then
      export TMPDIR=/tmp
    elif [[ -w /tmp ]];then
      mkdir -p "/tmp/$USER"
      export TMPDIR=/tmp/$USER
    else
      mkdir -p ~/tmp
      export TMPDIR=~/tmp
    fi
  fi

  # Python
  if [[ -f "$HOME/.pythonstartup.py" ]];then
    export PYTHONSTARTUP="$HOME/.pythonstartup.py"
  fi

  # Ruby
  if type gem >& /dev/null;then
    for d in $(gem environment gempath|sed 's/:/ /g');do
      _add_path PATH "$d/bin"
    done
  fi

  # GitHub
  export GITHUB_USER=rcmdnk

  # Trash
  export TRASHLIST=~/.trashlist # Where trash list is written
  export TRASHBOX=~/.Trash # Where trash will be moved in
                           # (.Trash is Mac's trash box)
  export MAXTRASHBOXSIZE=1024 # Max trash box size in MB
                              # Used for clean up
  export MAXTRASHSIZE=100 # Trashes larger than MAXTRASHBOXSIZE will be removed by 'rm' directly

  # sentaku
  export SENTAKU_NOHEADER=1

  # For my clipboards
  export CLMAXHIST=50
  if [ -n "$TERM" ];then
    export CLX
    CLX=$(multi_clipboard -C) 2>/dev/null
  fi

  # GitHub Copilot CLI
  if type github-copilot-cli >& /dev/null;then
    eval "$(github-copilot-cli alias -- "$0")"
  fi
} # }}} Shell/Environmental variables

_emotional_prompt () { # {{{
  PS1="\$(\
    ret=\$?;\
    rand=\$((RANDOM%36));\
    if [[ \$ret -eq 0 ]];then\
      if [[ \$rand -lt 3 ]];then\
        printf '\\[\\e[m\\](^_^)\\[\\e[m\\] \$ ';\
      elif [[ \$rand -lt 5 ]];then\
        printf '\\[\\e[m\\](^_-)\\[\\e[m\\] \$ ';\
      elif [[ \$rand -lt 6 ]];then\
        printf '\\[\\e[m\\](.^.)\\[\\e[m\\] \$ ';\
      else\
        printf '\\[\\e[m\\](-_-)\\[\\e[m\\] \$ ';\
      fi;\
    else\
      if [[ \$rand -lt 6 ]];then\
        printf '\\[\\e[31m\\](@o@)\\[\\e[m\\] \$ ';\
      elif [[ \$rand -lt 12 ]];then\
        printf '\\[\\e[31;1m\\](>_<)\\[\\e[m\\] \$ ';\
      elif [[ \$rand -lt 18 ]];then\
        printf '\\[\\e[35m\\](*_*)\\[\\e[m\\] \$ ';\
      elif [[ \$rand -lt 24 ]];then\
        printf '\\[\\e[34m\\](T_T)\\[\\e[m\\] \$ ';\
      elif [[ \$rand -eq 30 ]];then\
        printf '\\[\\e[34;1m\\](/_T)\\[\\e[m\\] \$ ';\
      else\
        printf '\\[\\e[31m\\](>_<)\\[\\e[m\\] \$ ';\
      fi\
    fi;\
    )"
} # }}}

_is_mosh () { # Check mosh {{{
  if ! type pstree >& /dev/null;then
    return 1
  fi
  local server
  server=$(pstree -ps  $$ | grep mosh-server)
  if [ -n "$server" ];then
    return 0
  fi
  return 1
} # }}}

_set_stty () { # stty, disable terminal lock {{{
  tty -s && stty stop undef
  tty -s && stty start undef
  [[ "$OSTYPE" = darwin* ]] && tty -s && stty discard undef
} # }}}

_set_alias () { # Alias {{{
  alias l='/bin/ls'
  if [[ "$OSTYPE" = linux* ]] || [[ "$OSTYPE" = cygwin* ]];then
    if ls --color=auto --show-control-char >/dev/null 2>&1;then
      alias ls='ls --color=auto --show-control-char'
      alias la='ls -A --color=auto --show-control-char'
    else
      alias ls='ls --color=auto'
      alias la='ls -A --color=auto'
    fi
  elif [[ "$OSTYPE" = darwin* ]];then
    alias ls='ls -G'
    alias la='ls -A -G'
  fi
  alias lt='ls -altr'
  alias badlink='find -L . -depth 1 -type l -ls'
  alias badlinkall='find -L . -type l -ls'
  alias g='make'
  alias gc="make clean"
  alias gcg="make clean && make"
  alias bc="bc -l -q"
  alias svnHeadDiff="svn diff --revision=HEAD"
  if type nvim >& /dev/null;then
    alias svnd="svn diff | nvim -"
    alias vi="nvim" # vi->vim
    alias memo="nvim ~/.memo.md"
    alias vid="nvim -d"
    alias vinon="nvim -u NONE"
  elif type vim >& /dev/null;then
  #if type vim >& /dev/null;then
    alias svnd="svn diff | vim -"
    #alias vim="vim -X --startuptime $TMPDIR/vim.startup.log" # no X, write startup processes
    alias vim="vim -X" # no X
    alias vi="vim" # vi->vim
    alias memo="vim ~/.memo.md"
    alias vid="vim -d"
    alias vinon="vim -u NONE"
  fi
  alias put='multi_clipboard -x'
  alias del="trash -f -r"
  alias histcheck="history|awk '{print \$4}'|sort|uniq -c|sort -n"
  alias histcheckarg="history|awk '{print \$4\" \"\$5\" \"\$6\" \"\$7\" \"\$8\" \"\$9\" \"\$10}'|sort|uniq -c|sort -n"
  alias sort='LC_ALL=C sort'
  alias uniq='LC_ALL=C uniq'
  alias t='less -L +F'
  alias iocheck='find /proc -name io |xargs egrep "write|read"|sort -n -k 2'
  alias now='date +"%Y%m%d %T"'
  alias pip_upgrade="pip list --outdated --format=legacy|cut -d' ' -f1|xargs pip install -U"
  alias stow="stow --override='share/info/dir'"
  #type thefuck >& /dev/null &&  eval "$(thefuck --alias)"
  type hub >& /dev/null && eval "$(hub alias -s)" # Use GitHub wrapper for git
  #alias ssh="ssh -Y"
  #type sshrc >& /dev/null && alias ssh="sshrc -Y"
  #type moshrc >& /dev/null && alias mosh="moshrc"
  type colordiff >& /dev/null && alias diff='colordiff'
#  if type bat >& /dev/null;then
#    alias cat='bat'
#  elif type ccat >& /dev/null;then
  if type ccat >& /dev/null;then
    alias cat='ccat --bg=dark -G String="fuchsia" -G Keyword="yellow" -G Plaintext="lightgray" -G Decimal="fuchsia" -G Punctuation="lightgray" -G Type="lightgray" -G Comment="turquoise"'
  fi
  if type open >& /dev/null;then
    if type powershell.exe >& /dev/null;then
      alias open="powershell.exe /c start"
    fi
  fi
} # }}} Alias

_set_function () { # Functions  {{{
  man () { # man with vi {{{
    if type nvim >& /dev/null;then
      vi_cmd=nvim
    elif type vim >& /dev/null;then
      vi_cmd=vim
    elif type vi >& /dev/null;then
      vi_cmd=vi
    else
      vi_cmd=""
    fi
    if [[ $# -ne 1 ||  "$1" =~ ^- ]] || [ -z "$vi_cmd" ];then
      command man "$@"
      return $?
    fi

    var=$(command man -P cat "$@" 2>&1)
    ret=$?
    if [[ $ret -eq 0 ]];then
      echo "$var"|col -bx|$vi_cmd -R -c 'set ft=man' -
    else
      echo "$var"
      return $ret
    fi
  } # }}}

  if ! type tree >& /dev/null;then  # tree {{{
    tree () {
      opt=""
      directory="."
      while [ $# -gt 0 ];do
        case $1 in
          "-L")opt="$opt -d $2";shift;;
          "-d")opt="$opt -type d";shift;;
          "-*")echo "$1 is invalid option";exit 1;;
          "*")directory="$*";break;;
        esac
        shift
      done
      find "$directory" $opt| sort | sed '1d;s,[^/]*/,|    ,g;s/..//;s/[^ ]*$/|-- &/'
    }
  fi   # }}}

  conda_setup () {  # {{{
    # !! Contents within this block are managed by 'conda init' !!
    if ! type conda >& /dev/null;then
      if [ -d "$HOME/miniconda3/bin" ];then
        _add_path PATH "$HOME/miniconda3/bin"
      fi
    fi
    if ! type conda >& /dev/null;then
      print "no conada command was found"
    fi
    __conda_setup="$('conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
      else
        echo "No conda command was found!"
    fi
    unset __conda_setup
  }  # }}}

  lima_setup () {  # {{{
    export DOCKER_HOST=unix://$HOME/.lima/amd64/sock/docker.sock
  }  # }}}

  # for ghq {{{
  if type ghq >& /dev/null;then
    ghqgo () {
      if [[ $# -eq 1 ]];then
        local repo="$1"
      else
        local repo=$(command ghq list|sort|sentaku)
      fi
      if [[ -n "$repo" ]];then
        cd "$(command ghq root)/$repo"
      fi
    }

    ghqget () {
      if [[ $# -eq 0 ]];then
        command ghq --help
        return
      fi
      repo="$1"
      local n=$(echo "$repo"|awk '{n=split($1, tmp, "/")}{print n}')
      if [[ "$n" -eq 1 ]];then
        repo="$(git config  --get user.name)/$repo"
      fi
      command ghq get -p "$repo"
    }

    ghqrm () {
      if [[ $# -gt 0 ]];then
        local repos=("$@")
      else
        local repos=($(command ghq list|sentaku))
      fi
      for r in "${repos[@]}";do
        local n="$(echo "$r"|awk '{print split($0, tmp, "/")}')"
        if [[ "$n" -eq 1 ]];then
          local dir="$(ls -d "$(command ghq root)/"*/*"/$r")"
        elif [[ "$n" -eq 2 ]];then
          local dir="$(ls -d "$(command ghq root)/"*"/$r")"
        elif [[ "$n" -eq 3 ]];then
          local dir="$(ls -d "$(command ghq root)/$r")"
        else
          local dir="$r"
        fi
        if [[ -n "$dir" ]];then
          rm -rf "$dir"
        fi
      done
    }

    ghqlist () {
      command ghq list
    }

    ghqls () {
      ghqlist "$@"
    }

    ghq () {
      if [[ "$1" = "go" ]];then
        shift
        ghqgo "$@"
      elif [[ "$1" = "get" ]];then
        shift
        ghqget "$@"
      elif [[ "$1" = "rm" ]];then
        shift
        ghqrm "$@"
      elif [[ "$1" = "list" ]];then
        shift
        ghqlist "$@"
      elif [[ "$1" = "ls" ]];then
        shift
        ghqls "$@"
      else
        command ghq "$@"
      fi
    }
  fi   # }}}

  docker_clean () {   # {{{
    docker system prune -a --volumes --force
    docker container rm -f $(docker container ls -aq)
    docker image rm -f $(docker image ls -q)
  }  # }}}
} # }}} Functions

_gnu_bsd_compatibility () { # GNU-BSD compatibility {{{
  gnu_bsd_check () {
    [[ $($1 --version 2>/dev/null) == *GNU* ]] && return 0
    return 1
  }

  # cp wraper for BSD cp (make it like GNU cp){{{
  # Remove the end "/" and change -r to -R
  if ! gnu_bsd_check cp;then
    cp () {
      local -a opt
      opt=()
      local -a vars
      vars=()
      while [[ $# -gt 0 ]];do
        if [[ "$1" == -* ]];then
          if [[ "$1" == "-r" ]];then
            opt=("${opt[@]}" -R)
          else
            opt=("${opt[@]}" "$1")
          fi
        else
          vars=("${vars[@]}" "${1%/}")
        fi
        shift
      done
      command cp "${opt[@]}" "${vars[@]}"
    }
  fi # }}}

  # sedi: Use common function in Mac/Unix for sed -i... w/o backup {{{
  # Unix uses GNU sed
  # Mac uses BSD sed
  # BSD sed requires suffix for backup file when "-i" option is given
  # (for no backup, need ""),
  # while GNU sed can run w/o suffix and doesn't make backup file
  function sedi () {
    local tmpfile=$(mktemp)
    local cmd="$1"
    local file="$2"
    sed "$cmd" "$file" > "$tmpfile"
    mv "$tmpfile" "$file"
  }
  # }}}

  # tac (use tail -r at BSD): Revert lines in the file/std input {{{
  # Note: There is "rev" command which
  #       reversing the order of characters in every line.
  # Set reverse command as tac for BSD
  if ! type tac >& /dev/null;then
    if ! gnu_bsd_check tail;then
      alias tac='tail -r'
    else
      # need "function" to avoid error on alias,
      # even if this path is not used.
      function tac () {
        if [ ! -f "$1" ];then
          echo "usage: tac <file>"
          return 1
        fi
        sed -e '1!G;h;$!d' "$1"|while read -r line;do
          echo "$line"
        done
      }
    fi
  fi # }}} tac
} # }}} GNU-BSD compatibility

_source_files () {  # {{{
  # completion files
  for d in "$HOME/usr";do
    _load_completion "$d"
  done

  # completion files in ghq
  if type ghq >& /dev/null;then
    local root
    root=$(command ghq root)
    if [[ -z "$root" ]];then
      root="$HOME/.ghq"
    fi
    for d in $(command ghq list);do
      _load_completion "$d"
    done
  fi

  ## sd/cl: Directory save/move in different terminal
  _source_file ~/usr/etc/sd_cl

  # Shell logger
  _source_file ~/usr/etc/shell-logger

  # Load RVM into a shell session *as a function*
  _source_file ~/.rvm/scripts/rvm

  # Rust
  _source_file ~/.cargo/env

  # For screen
  _source_file ~/.screen/setup.sh

  # For GitHub
  _source_file ~/.github_token

  # For OpenAI
  _source_file ~/.openai_api_key

  # For Terraform
  _source_file ~/.pluralith
  _source_file ~/.infracost


  # aws
  if ! type aws_completer >& /dev/null;then
    complete -C "$(which aws_completer)" aws
  fi

  # File used in linux
  [[ "$OSTYPE" = linux* ]] && _source_file ~/.linuxrc

  # File used in mac
  [[ "$OSTYPE" = darwin* ]] && _source_file ~/.macrc

  # File used in windows (cygwin)
  [[ "$OSTYPE" = cygwin* ]] && _source_file ~/.winrc

  # Private settings
  _source_file ~/.privaterc

  # File for special settings for each machine
  _source_file ~/.localrc
} # }}} _source_files

# {{{ Main part
_mainrc () {
  _reset_path
  _set_path
  _set_env
  _set_stty
  _set_alias
  _set_function
  _gnu_bsd_compatibility
  _source_files
}
# }}}
